# 开发环境配置
server:
  # 服务器的HTTP端口，默认为80
  port: 8081
  servlet:
    # 应用的访问路径
    context-path: /bbq-ddd
#  undertow:
#    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程 不要设置过大，如果过大，启动项目会报错：打开文件数过多
#    io-threads: 16
#    # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
#    worker-threads: 256
#    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
#    buffer-size: 1024
#    # 是否分配的直接内存(NIO直接分配的堆外内存)
#    direct-buffers: true


spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/bbq-ddd?serverTimezone=Asia/Shanghai&useUnicode=true&useSSL=false
    username: root
    password: 123456
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
        connection-timeout: 30000   # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
        idle-timeout: 600000        # 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
        max-lifetime: 1800000       # 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒
        maximum-pool-size: 60       # 连接池中允许的最大连接数。缺省值：10
        minimum-idle: 10            # 池中维护的最小空闲连接数
  servlet:
    multipart: #文件上传
      max-file-size:  10MB # 单个文件大小
      max-request-size:  20MB # 设置总上传的文件大小
  devtools: # 开发工具服务模块
    restart:
      enabled: true # 热部署开关
  mvc:
    throw-exception-if-no-handler-found: true #出现错误时, 直接抛出异常
  resources:
    add-mappings: false #不要为我们工程中的资源文件建立映射

mybatis-plus:
  #MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名
  type-aliases-package: com.microserv.bbq.infrastructure.persistence.po
  configuration:
    # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
    map-underscore-to-camel-case: true
    # 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true
    cache-enabled: false
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      #表名下划线命名默认true
      table-underline: true
      #id类型
      id-type: auto
      #逻辑已删除值,(逻辑删除下有效) 需要注入逻辑策略LogicSqlInjector 以@Bean方式注入
      logic-not-delete-value: 0
      #逻辑未删除值,(逻辑删除下有效)
      logic-delete-value: 1
    banner: false

